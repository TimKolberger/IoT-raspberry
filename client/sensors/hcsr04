#!/usr/bin/python
#Bibliotheken einbinden
import RPi.GPIO as GPIO
import time
import datetime
import json
import sys

pin_trigger = int(sys.argv[1])
pin_echo = int(sys.argv[2])
delay = int(sys.argv[3])

#GPIO Modus (BOARD / BCM)
GPIO.setmode(GPIO.BOARD)
GPIO.setwarnings(False)

#Richtung der GPIO-Pins festlegen (IN / OUT)
GPIO.setup(pin_trigger, GPIO.OUT)
GPIO.setup(pin_echo, GPIO.IN)

def distanz():
	# setze Trigger auf HIGH
	GPIO.output(pin_trigger, True)

	# setze Trigger nach 0.01ms aus LOW
	time.sleep(0.00001)
	GPIO.output(pin_trigger, False)

	StartZeit = time.time()
	StopZeit = time.time()

	# speichere Startzeit
	while GPIO.input(pin_echo) == 0:
		StartZeit = time.time()

	# speichere Ankunftszeit
	while GPIO.input(pin_echo) == 1:
		StopZeit = time.time()

	# Zeit Differenz zwischen Start und Ankunft
	TimeElapsed = StopZeit - StartZeit
	# mit der Schallgeschwindigkeit (34300 cm/s) multiplizieren
	# und durch 2 teilen, da hin und zurueck
	distanz = (TimeElapsed * 34300) / 2

	return distanz

if __name__ == '__main__':
	try:
		json_template = { 'distance': 0, 'time': str(datetime.datetime.now().time()) }

		while True:
			abstand = float("{0:.2f}".format(distanz()))

			json_template['distance'] = abstand
			json_template['time'] = str(datetime.datetime.now().time())

			print json.dumps(json_template)
			sys.stdout.flush()

			time.sleep(delay)

	except KeyboardInterrupt:
		GPIO.cleanup()